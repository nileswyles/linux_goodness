#include <libudev.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <stdlib.h>

int main(void) {
  struct udev * udev_ptr;
  struct udev_enumerate * enumerate;

  udev_ptr = udev_new();
  enumerate = udev_enumerate_new(udev_ptr);

  udev_enumerate_add_match_subsystem(enumerate, "input");
  udev_enumerate_add_match_is_initialized(enumerate);

  udev_enumerate_scan_devices(enumerate);

  struct udev_list_entry * entry = udev_enumerate_get_list_entry(enumerate);

  while (entry != NULL) {    
    const char * name = udev_list_entry_get_name(entry);
    struct udev_device * device = udev_device_new_from_syspath(udev_ptr, name);
    const char * dev_path = udev_device_get_devpath(device);
    const char * dev_type = udev_device_get_devtype(device);
    const char * dev_sysname = udev_device_get_sysname(device);
    const char * dev_sysnum = udev_device_get_sysnum(device);
    const char * dev_driver = udev_device_get_driver(device);
    const char * dev_node = udev_device_get_devnode(device);
    const char * sys_path = udev_device_get_syspath(device);
    //const dev_t * dev_num = udev_device_get_devnum(device);

      struct udev_list_entry * devlinks = udev_device_get_properties_list_entry(device);
      while (devlinks != NULL) {
        printf("ENTRY NAME: %s, VALUE: %s\n", udev_list_entry_get_name(devlinks), udev_list_entry_get_value(devlinks)); 
        devlinks = udev_list_entry_get_next(devlinks);
      }
    char * path = (char *)malloc((strlen(name) + 5) * sizeof(char));
    strcpy(path, name);
    strcat(path, "/name"); 
    //printf("path: %s\n", path);

    char device_name[100] = {0};
    int name_fd = open(path, O_RDONLY);
    int bytes_read = read(name_fd, device_name, 100);

    if (bytes_read > 0 && strcmp(device_name, "Apple SPI Keyboard\n") == 0) {
      printf("ENTRY NAME: %s, VALUE: %s\n", name, udev_list_entry_get_value(entry)); 
      printf("PATH: %s, TYPE: %s, SYSNAME: %s, SYSNUM: %s, DRIVER: %s, DEV_NAME: %s\n", dev_path, dev_type, dev_sysname, dev_sysnum, dev_driver, device_name);
      printf("DEV_NODE: %s, SYSPATH: %s\n", dev_node, sys_path);
    }

    free(path);
    entry = udev_list_entry_get_next(entry);
  }
  

  return 0;
}


