####
# In conclusion, use xmodmap or similar solution lol.
#

####
# libinput example did not work... I was able to detect input devices via udev backend but was not recieving key events.
#  reading the device file returns inconstent data across reads for the same key sequences... so there's some ***magic*** going on there.. maybe the wrong device file?

according to libinput cli, logitech keyboard maps fn key sequencies in "hardware" (at a lower level) while it's a dedicated key code with the apple keyboard. Given that, fn key sequences shouldn't conflict with any application specific key sequences, if I am able to read (and don't consume, or read and consume?) then insert key presses...

Look at charset (system-wide?)


Notes:
log.txt.1 (logging character device to file... pressed fn key many times, held, pressed again many times, then ctrl-c to close pipe)

# First byte = 0x84 == Press? (---- Press + 1 = 0x85 == Release?)
First byte = 0x84 (byte preceding 0x033, is incremented)
0x33 0xD9 0x65 (appears many times, seems to be part of some 'key event' header)
0x00 (x4)
0x05 0x14 0x0D

log.txt.2 (logging character device to file... pressed a twice, then b,c, then ctrl-c)

first byte some kind of identifer? yep, looks like it, 6 key presses and incremented 5 times.

Looking at 0x3b, 
0x77 0x54 0x01
and 
0xFA 0xBC 0x02
appear twice

the rest seems uninteresting (NULs 01 00 1E 00 01 NULs) and some form of separator


Looking at 0x3c,
0xE7 0x51 0x04
and
0x18 0xCA 0x05
appear twice

Looking at 0x40,
0x2C 0xA5 0x05
and
0x2B 0xFB 0x06
 
and more
...
...
...


log.txt.3 (just a, and ctrl-c)

Looking at 0xD6
0xA9 0x53 0x0C
and 
0xCE 0xCB 0x0D
appear twice


Looking at 0xDB
0xC7 0xE5 0x00
and
0x31 0xAE 0x04
appear twice



log.txt.4 (just a, ctrl-c was performed by another keyboard.)

Looking at 0x86 3E D9 65

0C 19 07
C4 71 08

log.txt.5 (just a, ctrl-c was performed by another keyboard.)


Looking at 0x3E 3E D9 65

16 4E 0D
31 39 0E


log.txt.6 (just a, ctrl-c was performed by another keyboard.)

Looking at 0xBF 40 D9 65

27 A4 05
6A 8E 06

again with 01 00 1E 00 separator.


see the pattern?









-----
This article seems to document a declarative way of doing it, if only you already know the key codes lol (unicode, ascii?):
https://wiki.archlinux.org/title/Linux_console/Keyboard_configuration
and it might be application (tty-console) specific... 


Procedure:
dumpkeys -k to see current config
create personal keymap usingn current config as reference..

i.e 'keycode 41 = grave' in current config => 'control keycode 41 = Escape', to map control + grave to Escape...

/usr/share/kbd/keymaps/fn_key_row_map.inc

More voodoo magic... not working as expected per the link above and example in include directory.

